import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id "java"
	id "org.springframework.boot" version "3.2.2"
	id "io.spring.dependency-management" version "1.1.4"
	id 'org.openapi.generator' version '7.2.0'
	id "maven-publish"
}
apply plugin: "org.openapi.generator"

group = "org.leha"
version = "0.0.1-SNAPSHOT"

java {
	sourceCompatibility = "21"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	compileOnly "org.projectlombok:lombok"

	implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	implementation "jakarta.validation:jakarta.validation-api:3.0.2"
	implementation "org.openapitools:jackson-databind-nullable:0.2.5"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0"
	implementation "io.micrometer:micrometer-tracing-bridge-brave"

	annotationProcessor "org.projectlombok:lombok"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
}

tasks.named("test") {
	useJUnitPlatform()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


void createOpenApiGenerateTask(String ymlName) {
	String taskName = "openApiGenerate_" + ymlName;
	tasks.register(taskName, GenerateTask) {
		generatorName = 'spring'
		inputSpec = "$projectDir/src/main/resources/api/${ymlName}/${ymlName}.yml".toString()
		outputDir = "$buildDir/generated-sources/openapi"
		apiPackage = "com.srini.${ymlName}.api".toString()
		modelPackage = "com.srini.${ymlName}.model".toString()
		generatorName = 'spring'
		library = 'spring-boot'
		modelNameSuffix = "${ymlName}DTO".toString()
		configOptions = [
				interfaceOnly       : "true",
				skipDefaultInterface: "true",
				useSpringBoot3      : "true"
		]

	}
	compileJava.dependsOn(taskName)

}

String[] ymlNames = ["presentation"]

ymlNames.each { String ymlName ->
	createOpenApiGenerateTask(ymlName);
}

sourceSets {
	main {
		java {
			srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
		}
	}
}


